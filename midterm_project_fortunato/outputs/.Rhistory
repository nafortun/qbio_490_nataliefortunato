}
library(ggplot2)
# Initialize a Survival Object ------- come back here
surv_object_therapy <- Surv(time = therapy_cleaned_clinic$survival_time, event =
therapy_cleaned_clinic$death_event)
# Create a Fit Object
therapy_fit <- survfit(surv_object_therapy ~ therapy_cleaned_clinic$therapy_types, data = therapy_cleaned_clinic)
View(therapy_cleaned_clinic)
View(therapy_cleaned_clinic)
clinical_drug$therapy_types
View(clinic)
therapy_cleaned_clinic <- clinic[therapy_mask,]
View(therapy_cleaned_clinic)
# Make a Survival Time Column for Survival Plots
therapy_cleaned_clinic$survival_time <- ifelse(is.na(therapy_cleaned_clinic$days_to_death),
therapy_cleaned_clinic$survival_time
<- therapy_cleaned_clinic$days_to_last_followup,
therapy_cleaned_clinic$survival_time
<- therapy_cleaned_clinic$days_to_death)
# Remove Any Infinite Values in Survival Time Column
inf_mask <- ifelse(therapy_cleaned_clinic$survival_time == "-Inf", F, T)
therapy_cleaned_clinic <- therapy_cleaned_clinic[inf_mask, ]
View(therapy_cleaned_clinic)
therapy_cleaned_clinic$survival_time
rm(inf_mask)
# Remove Any Infinite Values in Survival Time Column
#inf_mask <- ifelse(therapy_cleaned_clinic$survival_time == "-Inf", F, T)
therapy_cleaned_clinic <-
therapy_cleaned_clinic[!is.na(therapy_cleaned_clinic$survival_time), ]
View(therapy_cleaned_clinic)
# Make a Death Event (T/F) Column for Survival Plots
therapy_cleaned_clinic$death_event < ifelse(therapy_cleaned_clinic$vital_status == "Alive",
therapy_cleaned_clinic$death_event <- FALSE,
therapy_cleaned_clinic$death_event <- TRUE)
therapy_cleaned_clinic$vital_status
therapy_cleaned_clinic$death_event
# Make a Death Event (T/F) Column for Survival Plots -----------
therapy_cleaned_clinic$death_event < ifelse(therapy_cleaned_clinic$vital_status == "Alive", F, T)
therapy_cleaned_clinic <- clinic[therapy_mask,]
# Remove Patients without vital_status Data
na_mask <- ifelse(therapy_cleaned_clinic$vital_status == 'Alive' |
therapy_cleaned_clinic$vital_status == 'Dead', T, F)
sum(na_mask)
# Remove Patients without vital_status Data
na_mask <- ifelse(therapy_cleaned_clinic$vital_status == '<NA>', F, T)
sum(na_mask)
therapy_cleaned_clinic$vital_status
factor(therapy_cleaned_clinic$vital_status)
# Remove Patients without vital_status Data -----------------------
na_mask <- ifelse(therapy_cleaned_clinic$vital_status == "Alive" |
therapy_cleaned_clinic$vital_status == "Dead", T, F)
na_mask
# Remove Patients without vital_status Data -----------------------
na_mask <- ifelse(therapy_cleaned_clinic$vital_status == "<NA>", F, T)
na_mask
na_mask <- !is.na(na_mask)
na_mask
therapy_cleaned_clinic <- clinic[na_mask,]
View(therapy_cleaned_clinic)
# Make a Survival Time Column for Survival Plots
therapy_cleaned_clinic$survival_time <- ifelse(is.na(therapy_cleaned_clinic$days_to_death),
therapy_cleaned_clinic$survival_time
<- therapy_cleaned_clinic$days_to_last_followup,
therapy_cleaned_clinic$survival_time
<- therapy_cleaned_clinic$days_to_death)
# Remove Any Infinite Values in Survival Time Column
#inf_mask <- ifelse(therapy_cleaned_clinic$survival_time == "-Inf", F, T)
therapy_cleaned_clinic <-
therapy_cleaned_clinic[!is.na(therapy_cleaned_clinic$survival_time), ]
# Make a Death Event (T/F) Column for Survival Plots -----------
therapy_cleaned_clinic$death_event < ifelse(therapy_cleaned_clinic$vital_status == "Alive", F, T)
therapy_cleaned_clinic$death_event
therapy_cleaned_clinic$vital_status
therapy_cleaned_clinic$survival_time
# Remove Any Infinite Values in Survival Time Column
inf_mask <- ifelse(therapy_cleaned_clinic$survival_time == "-Inf", F, T)
therapy_cleaned_clinic <-
therapy_cleaned_clinic[inf_mask, ]
# Make a Death Event (T/F) Column for Survival Plots -----------
therapy_cleaned_clinic$death_event < ifelse(therapy_cleaned_clinic$vital_status == "Alive", F, T)
# Make a Death Event (T/F) Column for Survival Plots -----------
therapy_cleaned_clinic$death_event <- ifelse(therapy_cleaned_clinic$vital_status == "Alive", F, T)
# Initialize a Survival Object
surv_object_therapy <- Surv(time = therapy_cleaned_clinic$survival_time, event =
therapy_cleaned_clinic$death_event)
# Create a Fit Object ---------------------------------------------
therapy_fit <- survfit(surv_object_therapy ~ therapy_cleaned_clinic$therapy_types, data = therapy_cleaned_clinic)
therapy_cleaned_clinic <- clinic_drug_merge[na_mask,]
# Make a Survival Time Column for Survival Plots
therapy_cleaned_clinic$survival_time <- ifelse(is.na(therapy_cleaned_clinic$days_to_death),
therapy_cleaned_clinic$survival_time
<- therapy_cleaned_clinic$days_to_last_followup,
therapy_cleaned_clinic$survival_time
<- therapy_cleaned_clinic$days_to_death)
# Remove Any Infinite Values in Survival Time Column
inf_mask <- ifelse(therapy_cleaned_clinic$survival_time == "-Inf", F, T)
therapy_cleaned_clinic <-
therapy_cleaned_clinic[inf_mask, ]
# Make a Death Event (T/F) Column for Survival Plots -----------
therapy_cleaned_clinic$death_event <- ifelse(therapy_cleaned_clinic$vital_status == "Alive", F, T)
# Initialize a Survival Object
surv_object_therapy <- Surv(time = therapy_cleaned_clinic$survival_time, event =
therapy_cleaned_clinic$death_event)
# Create a Fit Object ---------------------------------------------
therapy_fit <- survfit(surv_object_therapy ~ therapy_cleaned_clinic$therapy_types, data = therapy_cleaned_clinic)
# Format and Create KM plot
survplot_therapy <- ggsurvplot(therapy_fit, pval=TRUE,
ggtheme = theme(plot.margin = unit(c(1,1,1,1), "cm")),
legend = "right")
# Save KM Plot to a Variable
KM_plot_therapy <- survplot_therapy$plot + theme_bw() + theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
# Show Plot
KM_plot_therapy
therapy_cleaned_clinic$therapy_types
clinic_drug_merge <- merge(clinic, clinical_drug, by = "Tumor_Sample_Barcode")
# Remove Patients who did not Receive Hormone or Chemotherapy
therapy_mask <- ifelse(clinic_drug_merge$therapy_types == 'Chemotherapy'
| clinic_drug_merge$therapy_types == 'Hormone Therapy',
T, F)
therapy_cleaned_clinic <- clinic_drug_merge[therapy_mask,]
therapy_cleaned_clinic$vital_status
# Remove Patients without vital_status Data -----------------------
na_mask <- ifelse(therapy_cleaned_clinic$vital_status == "<NA>", F, T)
na_mask
na_mask <- !is.na(na_mask)
na_mask
therapy_cleaned_clinic <- therapy_cleaned_clinic[na_mask,]
# Make a Survival Time Column for Survival Plots
therapy_cleaned_clinic$survival_time <- ifelse(is.na(therapy_cleaned_clinic$days_to_death),
therapy_cleaned_clinic$survival_time
<- therapy_cleaned_clinic$days_to_last_followup,
therapy_cleaned_clinic$survival_time
<- therapy_cleaned_clinic$days_to_death)
# Remove Any Infinite Values in Survival Time Column
inf_mask <- ifelse(therapy_cleaned_clinic$survival_time == "-Inf", F, T)
therapy_cleaned_clinic <-
therapy_cleaned_clinic[inf_mask, ]
# Make a Death Event (T/F) Column for Survival Plots -----------
therapy_cleaned_clinic$death_event <- ifelse(therapy_cleaned_clinic$vital_status == "Alive", F, T)
# Initialize a Survival Object
surv_object_therapy <- Surv(time = therapy_cleaned_clinic$survival_time, event =
therapy_cleaned_clinic$death_event)
# Create a Fit Object ---------------------------------------------
therapy_fit <- survfit(surv_object_therapy ~ therapy_cleaned_clinic$therapy_types, data = therapy_cleaned_clinic)
# Format and Create KM plot
survplot_therapy <- ggsurvplot(therapy_fit, pval=TRUE,
ggtheme = theme(plot.margin = unit(c(1,1,1,1), "cm")),
legend = "right")
# Save KM Plot to a Variable
KM_plot_therapy <- survplot_therapy$plot + theme_bw() + theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
# Show Plot
KM_plot_therapy
# Save Plot
jpeg("KM_plot_therapy.jpg")
KM_plot_therapy <- survplot_age$plot + theme_bw() + theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
KM_plot_therapy <- survplot_therapy$plot + theme_bw() + theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
KM_plot_therapy
dev.off()
maf_object@clinical.data$histological_type
View(clinic_drug_merge)
#############################
chemo_mask <- ifelse(clinic_drug_merge$therapy_types == 'Chemotherapy', T, F)
chemo_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[chemo_mask]
chemo_maf <- subsetMaf(maf = maf_object,
tsb = chemo_patient_barcodes)
hormone_mask <- ifelse(clinic_drug_merge$therapy_types == 'Hormone Therapy', T, F)
hormone_patient_barcodes <- maf_object@clinical.data$Tumor_Sample_Barcode[hormone_mask]
hormone_maf <- subsetMaf(maf = maf_object,
tsb = hormone_patient_barcodes)
lollipop_therapy_plot <- lollipopPlot2(m1 = chemo_maf,
m2 = hormone_maf,
m1_name = 'Pateints who Recieved Chemotherapy',
m2_name = 'Patients who Recieved Hormone Therapy',
gene = "RYR2")
lollipop_therapy_plot
jpeg("lollipop_therapy_plot.jpg")
lollipop_therapy_plot <- lollipopPlot2(m1 = chemo_maf,
m2 = hormone_maf,
m1_name = 'Pateints who Recieved Chemotherapy',
m2_name = 'Patients who Recieved Hormone Therapy',
gene = "RYR2")
lollipop_therapy_plot
dev.off()
#############################
# Volcano Plot
library(DESeq2)
View(clinic_drug_merge)
clinic_drug_merge$therapy_types
View(rna_counts)
View(rna_query)
rna_se@colData
rna_se@colData$age_at_index
View(rna_counts)
View(rna_genes)
rna_se@colData$barcode
View(rna_counts)
# Chemo/Hormone Therapy Masks Already Created Above (Lollipop Plot)
rna_counts_therapy <- rna_se@assays@data$unstranded[chemo_mask | hormone_mask, ]
rna_counts_therapy <- as.data.frame(rna_counts_therapy)
rna_clinical <- rna_se@colData[chemo_mask | hormone_mask, ]
rna_clinical <- rna_se@colData[,chemo_mask | hormone_mask ]
rm(rna_counts_therapy)
rm(rna_clinical)
# Data Preparation
# Create rna_clinical which Contains Data from colData
rna_clinical <- rna_se@colData[!is.na(rna_se@colData$age_at_index), ]
rna_clinical <- as.data.frame(rna_clinical)
# Subset out Treatments Column
treatments_mask <- ifelse(colnames(rna_clinical) == "treatments", F, T)
rna_clinical <- rna_clinical[ ,treatments_mask]
rna_counts_age <- rna_se@assays@data$unstranded[, !is.na(rna_se@colData$age_at_index)]
rna_counts_age <- as.data.frame(rna_counts_age)
# Create Column with Age Factor
rna_clinical$age_category <- ifelse(rna_clinical$age_at_index <= 58, "young", "old")
# Mask Out "Solid Tissue Normal"
tumor_mask <- ifelse(rna_clinical$definition == "Solid Tissue Normal", F, T)
rna_counts_age <- rna_counts_age[ ,tumor_mask]
rna_clinical <- rna_clinical[tumor_mask, ]
# Remove Genes where total gene_counts across all Patients < 10
gene_counts_mask <- ifelse(rowSums(rna_counts_age) < 10, F, T)
sum(!gene_counts_mask)
sum(gene_counts_mask)
rna_counts_age <- rna_counts_age[gene_counts_mask, ]
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical)
ncol(countData)
ncol(rna_counts)
nrow(rna_clinical)
ncol(rna_counts_age)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical)
rownames(rna_counts_age)
colnames(rna_counts_age)
rownames(rna_clinical)
colnames(rna_clinical)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical)
rownames(rna_counts_age) = NULL
colnames(rna_counts_age) = NULL
rownames(rna_clinical) = NULL
colnames(rna_clinical) = NULL
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical)
rna_clinical$age_at_indes
View(rna_clinical)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ "Primary solid Tumor" + "Metastatic" + V5)
rm(rna_counts_age)
rm(rna_clinical)
# Data Preparation
# Create rna_clinical which Contains Data from colData
rna_clinical <- rna_se@colData[!is.na(rna_se@colData$age_at_index), ]
rna_clinical <- as.data.frame(rna_clinical)
# Subset out Treatments Column
treatments_mask <- ifelse(colnames(rna_clinical) == "treatments", F, T)
rna_clinical <- rna_clinical[ ,treatments_mask]
rna_counts_age <- rna_se@assays@data$unstranded[, !is.na(rna_se@colData$age_at_index)]
rna_counts_age <- as.data.frame(rna_counts_age)
# Create Column with Age Factor
rna_clinical$age_category <- ifelse(rna_clinical$age_at_index <= 58, "young", "old")
# Mask Out "Solid Tissue Normal"
tumor_mask <- ifelse(rna_clinical$definition == "Solid Tissue Normal", F, T)
rna_counts_age <- rna_counts_age[ ,tumor_mask]
rna_clinical <- rna_clinical[tumor_mask, ]
# Remove Genes where total gene_counts across all Patients < 10
gene_counts_mask <- ifelse(rowSums(rna_counts_age) < 10, F, T)
rna_counts_age <- rna_counts_age[gene_counts_mask, ]
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ "Primary solid Tumor" + "Metastatic" + definition)
View(rna_se)
# Create Column with Age Factor
rna_clinical$age_category <- factor(ifelse(rna_clinical$age_at_index <= 58, "young", "old"))
# Mask Out "Solid Tissue Normal"
tumor_mask <- ifelse(rna_clinical$definition == "Solid Tissue Normal", F, T)
rna_counts_age <- rna_counts_age[ ,tumor_mask]
rna_clinical <- rna_clinical[tumor_mask, ]
rna_clinical$definition <- factor(rna_clinical$definition)
# Remove Genes where total gene_counts across all Patients < 10
gene_counts_mask <- ifelse(rowSums(rna_counts_age) < 10, F, T)
rna_counts_age <- rna_counts_age[gene_counts_mask, ]
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ "Primary solid Tumor" + "Metastatic" + definition)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ "Primary solid Tumor" + "Metastatic" + definition)
# Make Sure colnames of rna_counts_age and rownames of rna_clinical Match
colnames(rna_counts_age) <- rownames(rna_clinical)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ "Primary solid Tumor" + "Metastatic" + definition)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ Primary solid Tumor + Metastatic + definition)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ definition)
# Create DESeq Object
dds_obj <- DESeq(dds)
# See Results
resultsNames(dds_obj)
# See Young vs. Old Comparison
results <- results(dds_obj, format = "DataFrame",
# See Young vs. Old Comparison
results = results(dds_obj, format = "DataFrame", contrast = c("age_category”, "young", "old"))
# See Young vs. Old Comparison
results <- results(dds_obj, format = "DataFrame",
contrast = c("age_category", "young", "old"))
# See Results
resultsNames(dds_obj)
# See Young vs. Old Comparison
results <- results(dds_obj, format = "DataFrame",
contrast = c("definition", "Primary solid Tumor", "Metastatic"))
View(results)
gene_id_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes$gene_names <- rna_genes$gene_names[gene_id_mask]
results <- data.frame(rna_genes$gene_names, rownames$gene_id,
results$log2FoldChange, results$pvalue, results$padj,
-log10(results$padj))
results <- data.frame(rna_genes$gene_names, results@rownames$gene_id,
results$log2FoldChange, results$pvalue, results$padj,
-log10(results$padj))
results@rownames
rownames(results)
rownames(rna_counts_age)
View(rna_counts)
rownames(rna_clinical)
# Name rna_counts_age Rows with gene_id
rownames(rna_counts_age) <- rna_genes$gene_id
length(rna_genes$gene_id)
length(rownames(rna_counts_age))
# Data Preparation
# Create rna_clinical which Contains Data from colData
rna_clinical <- rna_se@colData[!is.na(rna_se@colData$age_at_index), ]
rna_clinical <- as.data.frame(rna_clinical)
# Subset out Treatments Column
treatments_mask <- ifelse(colnames(rna_clinical) == "treatments", F, T)
rna_clinical <- rna_clinical[ ,treatments_mask]
rna_counts_age <- rna_se@assays@data$unstranded[, !is.na(rna_se@colData$age_at_index)]
rna_counts_age <- as.data.frame(rna_counts_age)
# Name rna_counts_age Rows with gene_id
rownames(rna_counts_age) <- rna_genes$gene_id
# Create Column with Age Factor
rna_clinical$age_category <- factor(ifelse(rna_clinical$age_at_index <= 58, "young", "old"))
# Mask Out "Solid Tissue Normal"
tumor_mask <- ifelse(rna_clinical$definition == "Solid Tissue Normal", F, T)
rna_counts_age <- rna_counts_age[ ,tumor_mask]
rna_clinical <- rna_clinical[tumor_mask, ]
rna_clinical$definition <- factor(rna_clinical$definition)
# Remove Genes where total gene_counts across all Patients < 10
gene_counts_mask <- ifelse(rowSums(rna_counts_age) < 10, F, T)
rna_counts_age <- rna_counts_age[gene_counts_mask, ]
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ definition)
# Make Sure colnames of rna_counts_age and rownames of rna_clinical Match
colnames(rna_counts_age) <- rownames(rna_clinical)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ definition)
# Create DESeq Object
dds_obj <- DESeq(dds)
# See Results
resultsNames(dds_obj)
# See Young vs. Old Comparison
results <- results(dds_obj, format = "DataFrame",
contrast = c("definition", "Primary solid Tumor", "Metastatic"))
gene_id_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes$gene_names <- rna_genes$gene_names[gene_id_mask]
results <- data.frame(rna_genes$gene_names, results@rownames$gene_id,
results$log2FoldChange, results$pvalue, results$padj,
-log10(results$padj))
results <- data.frame(rna_genes$gene_names, rownames(results),
results$log2FoldChange, results$pvalue, results$padj,
-log10(results$padj))
length(rna_genes$gene_name)
sum(gene_id_mask)
rna_genes <- rna_genes$gene_names[gene_id_mask]
results <- data.frame(rna_genes$gene_names, rownames(results),
results$log2FoldChange, results$pvalue, results$padj,
-log10(results$padj))
numrows(rna_genes$gene_names)
numrow(rna_genes$gene_names)
numrow(rna_genes)
numrows(rna_genes)
#############################
# Scatterplot of TP53 vs. RYR2 Gene Counts
rna_genes <- rna_se@rowRanges@elementMetadata
rna_genes <- as.data.frame(rna_genes)
rownames(rna_genes) <- rna_genes$gene_id
# Data Preparation
# Create rna_clinical which Contains Data from colData
rna_clinical <- rna_se@colData[!is.na(rna_se@colData$age_at_index), ]
rna_clinical <- as.data.frame(rna_clinical)
# Subset out Treatments Column
treatments_mask <- ifelse(colnames(rna_clinical) == "treatments", F, T)
rna_clinical <- rna_clinical[ ,treatments_mask]
rna_counts_age <- rna_se@assays@data$unstranded[, !is.na(rna_se@colData$age_at_index)]
rna_counts_age <- as.data.frame(rna_counts_age)
# Name rna_counts_age Rows with gene_id
rownames(rna_counts_age) <- rna_genes$gene_id
# Create Column with Age Factor
rna_clinical$age_category <- factor(ifelse(rna_clinical$age_at_index <= 58, "young", "old"))
# Mask Out "Solid Tissue Normal"
tumor_mask <- ifelse(rna_clinical$definition == "Solid Tissue Normal", F, T)
rna_counts_age <- rna_counts_age[ ,tumor_mask]
rna_clinical <- rna_clinical[tumor_mask, ]
rna_clinical$definition <- factor(rna_clinical$definition)
# Remove Genes where total gene_counts across all Patients < 10
gene_counts_mask <- ifelse(rowSums(rna_counts_age) < 10, F, T)
rna_counts_age <- rna_counts_age[gene_counts_mask, ]
# Make Sure colnames of rna_counts_age and rownames of rna_clinical Match
colnames(rna_counts_age) <- rownames(rna_clinical)
# Create DESeq Data Set dds
dds <- DESeqDataSetFromMatrix(countData = rna_counts_age,
colData = rna_clinical,
design = ~ definition)
# See Young vs. Old Comparison
results <- results(dds_obj, format = "DataFrame",
contrast = c("definition", "Primary solid Tumor", "Metastatic"))
gene_id_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes <- rna_genes$gene_names[gene_id_mask]
results <- data.frame(rna_genes$gene_names, rownames(results),
results$log2FoldChange, results$pvalue, results$padj,
-log10(results$padj))
rna_genes$gene_names
#############################
# Scatterplot of TP53 vs. RYR2 Gene Counts
rna_genes <- rna_se@rowRanges@elementMetadata
rna_genes <- as.data.frame(rna_genes)
rownames(rna_genes) <- rna_genes$gene_id
gene_id_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
sum(gene_id_mask)
length(gene_id_mask)
rna_genes <- rna_genes$gene_names[gene_id_mask]
#############################
# Scatterplot of TP53 vs. RYR2 Gene Counts
rna_genes <- rna_se@rowRanges@elementMetadata
rna_genes <- as.data.frame(rna_genes)
rownames(rna_genes) <- rna_genes$gene_id
gene_id_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes <- rna_genes[gene_id_mask]
rna_genes <- rna_genes[gene_id_mask,]
results <- data.frame(rna_genes$gene_names, rownames(results),
results$log2FoldChange, results$pvalue, results$padj,
-log10(results$padj))
rna_genes$gene_name
results <- data.frame(rna_genes$gene_name, rownames(results),
results$log2FoldChange, results$pvalue, results$padj,
-log10(results$padj))
BiocManager::install(EnhancedVolcano)
BiocManager::install("EnhancedVolcano")
# Load EnhancedVolcano Library
library(EnhancedVolcano)
# Save Plot to a Variable
volcano_plot <-   EnhancedVolcano(results,
lab = rownames(results),
x = 'log2FoldChange',
y = 'pvalue')
is.numeric(results$results.log2FoldChange)
# Save Plot to a Variable
volcano_plot <-   EnhancedVolcano(results,
lab = rownames(results),
x = 'results.log2FoldChange',
y = 'pvalue')
# Save Plot to a Variable
volcano_plot <-   EnhancedVolcano(results,
lab = rownames(results),
x = 'results.log2FoldChange',
y = 'results.pvalue')
# Show Plot
volcano_plot
jpeg("volcano_plot.jpg")
volcano_plot <-   EnhancedVolcano(results,
lab = rownames(results),
x = 'results.log2FoldChange',
y = 'results.pvalue')
volcano_plot
dev.off()
